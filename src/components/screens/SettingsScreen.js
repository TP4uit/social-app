import React from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Switch,
  ScrollView,
} from "react-native";
import { colors, spacing, typography } from "../../theme";
import { useAuth } from "../../hooks/useAuth";

// ƒê·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu cho c√°c m·ª•c c√†i ƒë·∫∑t
const SETTINGS_SECTIONS = [
  {
    title: "Account",
    data: [
      {
        id: "personal_info",
        label: "Personal Information",
        icon: "üë§",
        type: "navigate",
        screen: "EditProfile",
      },
      {
        id: "password_security",
        label: "Password & Security",
        icon: "üîí",
        type: "navigate",
        screen: "ChangePassword",
      }, // Updated
      {
        id: "payment_methods",
        label: "Payment Methods",
        icon: "üí≥",
        type: "navigate",
        screen: "PaymentMethods",
      },
    ],
  },
  {
    title: "Privacy & Security",
    data: [
      {
        id: "privacy_settings",
        label: "Privacy Settings",
        icon: "üõ°Ô∏è",
        type: "navigate",
        screen: "PrivacyOptions",
      },
      {
        id: "blocked_users",
        label: "Blocked Users",
        icon: "üë•",
        type: "navigate",
        screen: "BlockedUsers",
      },
      {
        id: "two_factor",
        label: "Two-Factor Authentication",
        icon: "üîë",
        type: "navigate",
        screen: "TwoFactorAuth",
      },
    ],
  },
  {
    title: "Notifications",
    data: [
      {
        id: "push_notifications",
        label: "Push Notifications",
        icon: "üîî",
        type: "navigate",
        screen: "PushNotificationSettings",
      },
      {
        id: "email_notifications",
        label: "Email Notifications",
        icon: "‚úâÔ∏è",
        type: "navigate",
        screen: "EmailNotificationSettings",
      },
    ],
  },
  {
    title: "Preferences",
    data: [
      {
        id: "language",
        label: "Language",
        icon: "üåê",
        type: "value_navigate",
        value: "English",
        screen: "LanguageSettings",
      },
      {
        id: "dark_mode",
        label: "Dark Mode",
        icon: "üåô",
        type: "switch",
        stateKey: "darkModeEnabled",
      },
    ],
  },
  {
    title: "Support",
    data: [
      {
        id: "help_center",
        label: "Help Center",
        icon: "‚ùì",
        type: "navigate",
        screen: "HelpCenter",
      },
      {
        id: "contact_support",
        label: "Contact Support",
        icon: "üéß",
        type: "navigate",
        screen: "ContactSupport",
      },
    ],
  },
  {
    title: "About",
    data: [
      {
        id: "terms_service",
        label: "Terms of Service",
        icon: "üìÑ",
        type: "navigate",
        screen: "TermsOfService",
      },
      {
        id: "privacy_policy",
        label: "Privacy Policy",
        icon: "üìÑ",
        type: "navigate",
        screen: "PrivacyPolicy",
      },
      {
        id: "app_version",
        label: "App Version",
        icon: "‚ÑπÔ∏è",
        type: "value_only",
        value: "1.2.3",
      },
    ],
  },
];

const SettingsScreen = ({ navigation }) => {
  const { logout } = useAuth();

  // Qu·∫£n l√Ω tr·∫°ng th√°i cho c√°c Switch
  const [switches, setSwitches] = React.useState({
    darkModeEnabled: false, // Gi√° tr·ªã kh·ªüi t·∫°o
  });

  const toggleSwitch = (key) => {
    setSwitches((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const handleLogout = async () => {
    try {
      await logout();
      // Sau khi logout, AppNavigator s·∫Ω t·ª± ƒë·ªông chuy·ªÉn ƒë·∫øn m√†n h√¨nh Login
    } catch (error) {
      console.log("Logout error:", error);
    }
  };

  // Component render t·ª´ng m·ª•c c√†i ƒë·∫∑t
  const SettingItem = ({ item }) => (
    <TouchableOpacity
      style={styles.settingItem}
      onPress={() =>
        item.type === "navigate" || item.type === "value_navigate"
          ? navigation.navigate(item.screen)
          : {}
      }
      disabled={item.type === "switch" || item.type === "value_only"} // V√¥ hi·ªáu h√≥a onPress cho switch v√† value_only
    >
      <Text style={styles.itemIcon}>{item.icon}</Text>
      <Text style={styles.itemLabel}>{item.label}</Text>
      <View style={styles.itemRightContainer}>
        {item.type === "switch" && (
          <Switch
            value={switches[item.stateKey]}
            onValueChange={() => toggleSwitch(item.stateKey)}
            trackColor={{ false: colors.border, true: colors.primary }}
            thumbColor={colors.white}
            ios_backgroundColor={colors.border} // Cho iOS
          />
        )}
        {(item.type === "value_navigate" || item.type === "value_only") &&
          item.value && <Text style={styles.itemValue}>{item.value}</Text>}
        {(item.type === "navigate" || item.type === "value_navigate") && (
          <Text style={styles.itemArrow}>‚Ä∫</Text>
        )}
      </View>
    </TouchableOpacity>
  );

  return (
    <ScrollView
      style={styles.container}
      contentContainerStyle={styles.scrollContentContainer}
    >
      {SETTINGS_SECTIONS.map((section) => (
        <View key={section.title} style={styles.sectionContainer}>
          <Text style={styles.sectionTitle}>{section.title}</Text>
          <View style={styles.sectionItemsContainer}>
            {section.data.map((item, index) => (
              <View key={item.id}>
                <SettingItem item={item} />
                {index < section.data.length - 1 && (
                  <View style={styles.separator} />
                )}
              </View>
            ))}
          </View>
        </View>
      ))}

      <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
        <Text style={styles.logoutButtonText}>Logout</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background, // N·ªÅn x√°m r·∫•t nh·∫°t cho to√†n m√†n h√¨nh
  },
  scrollContentContainer: {
    paddingBottom: spacing.xxl, // ƒê·ªÉ c√≥ kh√¥ng gian cho n√∫t logout ·ªü cu·ªëi
  },
  sectionContainer: {
    marginTop: spacing.lg, // Kho·∫£ng c√°ch gi·ªØa c√°c section
    marginBottom: spacing.sm,
  },
  sectionTitle: {
    fontSize: typography.fontSize.md, // Font to h∆°n cho ti√™u ƒë·ªÅ section
    fontWeight: "bold",
    color: colors.textSecondary, // M√†u x√°m cho ti√™u ƒë·ªÅ section
    paddingHorizontal: spacing.lg, // CƒÉn l·ªÅ cho ti√™u ƒë·ªÅ section
    marginBottom: spacing.sm, // Kho·∫£ng c√°ch t·ª´ ti√™u ƒë·ªÅ ƒë·∫øn c√°c item
  },
  sectionItemsContainer: {
    backgroundColor: colors.white, // N·ªÅn tr·∫Øng cho c√°c item trong section
    borderRadius: 10, // Bo g√≥c cho c·∫£ kh·ªëi item
    marginHorizontal: spacing.md, // L·ªÅ ngang cho kh·ªëi item
    overflow: "hidden", // ƒê·ªÉ bo g√≥c ho·∫°t ƒë·ªông v·ªõi separator
    // Th√™m m·ªôt ch√∫t shadow nh·∫π theo phong c√°ch iOS (t√πy ch·ªçn)
    shadowColor: colors.black,
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  settingItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: spacing.md + 2, // TƒÉng padding d·ªçc
    paddingHorizontal: spacing.lg, // TƒÉng padding ngang
    backgroundColor: colors.white, // N·ªÅn tr·∫Øng cho t·ª´ng item
  },
  itemIcon: {
    fontSize: typography.fontSize.lg, // K√≠ch th∆∞·ªõc icon
    color: colors.textSecondary, // M√†u icon
    marginRight: spacing.md,
    width: 24, // Chi·ªÅu r·ªông c·ªë ƒë·ªãnh cho icon ƒë·ªÉ c√°c label th·∫≥ng h√†ng
    textAlign: "center",
  },
  itemLabel: {
    flex: 1, // ƒê·ªÉ label chi·∫øm h·∫øt kh√¥ng gian c√≤n l·∫°i
    fontSize: typography.fontSize.md,
    color: colors.text,
  },
  itemRightContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  itemValue: {
    fontSize: typography.fontSize.md,
    color: colors.textSecondary,
    marginRight: spacing.sm,
  },
  itemArrow: {
    fontSize: typography.fontSize.xl,
    color: colors.textSecondary, // M√†u x√°m nh·∫°t cho m≈©i t√™n
  },
  separator: {
    height: 1,
    backgroundColor: colors.border,
    marginLeft: spacing.lg + 24 + spacing.md, // (padding tr√°i c·ªßa item + width icon + margin ph·∫£i c·ªßa icon)
  },
  logoutButton: {
    backgroundColor: colors.white, // N·ªÅn tr·∫Øng cho n√∫t logout (kh√°c v·ªõi Figma m·ªôt ch√∫t ƒë·ªÉ d·ªÖ nh√¨n h∆°n tr√™n n·ªÅn x√°m)
    // Ho·∫∑c d√πng m√†u x√°m r·∫•t nh·∫°t: colors.background (m√†u n√†y gi·ªëng Figma h∆°n)
    // N·∫øu d√πng colors.background th√¨ c·∫ßn vi·ªÅn r√µ h∆°n ho·∫∑c kh√¥ng vi·ªÅn
    paddingVertical: spacing.lg - 2,
    marginHorizontal: spacing.md,
    borderRadius: 10, // Bo g√≥c gi·ªëng c√°c section item
    alignItems: "center",
    justifyContent: "center",
    marginTop: spacing.xl, // Kho·∫£ng c√°ch t·ª´ section cu·ªëi
    borderWidth: 1,
    borderColor: colors.border, // Th√™m vi·ªÅn nh·∫π
  },
  logoutButtonText: {
    color: colors.primary, // Ch·ªØ m√†u xanh primary
    fontSize: typography.fontSize.md,
    fontWeight: "bold", // Ch·ªØ ƒë·∫≠m
  },
});

export default SettingsScreen;
